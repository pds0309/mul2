
buildscript {
    ext {
        springBootVersion = '2.4.5'
    }
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
    }
}

allprojects {
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'jacoco'
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: "jacoco"
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    group 'com.example'
    version '0.0.1-SNAPSHOT'
    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
    }
    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }
    test {
        useJUnitPlatform()
    }
    // 모든 모듈에서 사용하는 라이브러리
    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    }

    jacocoTestReport {
        reports {
            html.enabled = true // 개발자 확인용
            xml.enabled = true // coveralls 전송용
        }
    }
}
project(':common'){
    bootJar { enabled = false }
    jar { enabled = true }
    dependencies {
        runtimeOnly 'com.h2database:h2'
    }
}
project(':api'){

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation project(':common')
    }
}
project(':batch'){
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation group: 'org.jsoup', name: 'jsoup', version: '1.13.1'
        implementation project(':common')
    }
}


task jacocoRootReport(type: JacocoReport) {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn = subprojects.test
    classDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from =  files(subprojects.sourceSets.main.output)
    executionData.from = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}
